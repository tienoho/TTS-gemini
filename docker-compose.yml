services:
  # Flask Application
  app:
    build: .
    container_name: flask-tts-api
    restart: unless-stopped
    environment:
      - FLASK_ENV=development
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-key}
      - SECRET_KEY=${SECRET_KEY:-your-flask-secret-key}
    ports:
      - "8080:5000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - redis
      # - postgres  # Uncomment if using local PostgreSQL
    networks:
      - tts-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Optional - comment out if using external DB)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: tts-postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=ghostwriter_tts
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=SunhousePTPM@#123
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - tts-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tts-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tts-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander
    container_name: tts-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - tts-network

networks:
  tts-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  # postgres_data:
  #   driver: local